// DO NOT EDIT: @generated by erupt's generator
///<s>Vulkan Manual Page</s> · Constant
#[doc(alias = "VK_EXT_TOOLING_INFO_SPEC_VERSION")]
pub const EXT_TOOLING_INFO_SPEC_VERSION: u32 = 1;
///<s>Vulkan Manual Page</s> · Constant
#[doc(alias = "VK_EXT_TOOLING_INFO_EXTENSION_NAME")]
pub const EXT_TOOLING_INFO_EXTENSION_NAME: *const std::os::raw::c_char = crate::cstr!(
    "VK_EXT_tooling_info"
);
///<s>Vulkan Manual Page</s> · Constant
pub const FN_GET_PHYSICAL_DEVICE_TOOL_PROPERTIES_EXT: *const std::os::raw::c_char = crate::cstr!(
    "vkGetPhysicalDeviceToolPropertiesEXT"
);
///[Vulkan Manual Page](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkToolPurposeFlagsEXT.html) · Alias
#[doc(alias = "VkToolPurposeFlagsEXT")]
#[allow(non_camel_case_types)]
pub type ToolPurposeFlagsEXT = crate::vk1_3::ToolPurposeFlags;
///[Vulkan Manual Page](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkToolPurposeFlagBitsEXT.html) · Alias
#[doc(alias = "VkToolPurposeFlagBitsEXT")]
#[allow(non_camel_case_types)]
pub type ToolPurposeFlagBitsEXT = crate::vk1_3::ToolPurposeFlagBits;
///[Vulkan Manual Page](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceToolPropertiesEXT.html) · Alias
#[doc(alias = "VkPhysicalDeviceToolPropertiesEXT")]
#[allow(non_camel_case_types)]
pub type PhysicalDeviceToolPropertiesEXT = crate::vk1_3::PhysicalDeviceToolProperties;
///[Vulkan Manual Page](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceToolPropertiesEXT.html) · Alias
#[doc(alias = "VkPhysicalDeviceToolPropertiesEXT")]
#[allow(non_camel_case_types)]
pub type PhysicalDeviceToolPropertiesEXTBuilder<'a> = crate::vk1_3::PhysicalDeviceToolPropertiesBuilder<
    'a,
>;
///[Vulkan Manual Page](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/vkGetPhysicalDeviceToolPropertiesEXT.html) · Alias
#[allow(non_camel_case_types)]
pub type PFN_vkGetPhysicalDeviceToolPropertiesEXT = crate::vk1_3::PFN_vkGetPhysicalDeviceToolProperties;
///Provided by [`crate::extensions::ext_tooling_info`]
impl crate::vk1_0::StructureType {
    pub const PHYSICAL_DEVICE_TOOL_PROPERTIES_EXT: Self = Self::PHYSICAL_DEVICE_TOOL_PROPERTIES;
}
///Provided by [`crate::extensions::ext_tooling_info`]
impl crate::vk1_3::ToolPurposeFlagBits {
    pub const DEBUG_REPORTING_EXT: Self = Self(32);
    pub const DEBUG_MARKERS_EXT: Self = Self(64);
}
///Provided by [`crate::extensions::ext_tooling_info`]
impl crate::InstanceLoader {
    #[inline]
    #[track_caller]
    ///[Vulkan Manual Page](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/vkGetPhysicalDeviceToolPropertiesEXT.html) · Function
    #[doc(alias = "vkGetPhysicalDeviceToolPropertiesEXT")]
    pub unsafe fn get_physical_device_tool_properties_ext(
        &self,
        physical_device: crate::vk1_0::PhysicalDevice,
        tool_count: Option<u32>,
        tool_properties_callback: impl FnMut(
            &mut crate::SmallVec<crate::vk1_3::PhysicalDeviceToolProperties>,
        ) -> (),
    ) -> crate::utils::VulkanResult<
            crate::SmallVec<crate::vk1_3::PhysicalDeviceToolProperties>,
        > {
        let _function = self
            .get_physical_device_tool_properties_ext
            .expect(crate::NOT_LOADED_MESSAGE);
        let mut tool_count = match tool_count {
            Some(v) => v,
            None => {
                let mut v = Default::default();
                _function(physical_device as _, &mut v, std::ptr::null_mut());
                v
            }
        };
        let mut tool_properties = crate::SmallVec::from_elem(
            Default::default(),
            tool_count as _,
        );
        let mut _callback = tool_properties_callback;
        _callback(&mut tool_properties);
        let _return = _function(
            physical_device as _,
            &mut tool_count,
            tool_properties.as_mut_ptr(),
        );
        crate::utils::VulkanResult::new(_return, tool_properties)
    }
}
