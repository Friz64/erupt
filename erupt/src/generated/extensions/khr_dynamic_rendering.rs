// DO NOT EDIT: @generated by erupt's generator
///<s>Vulkan Manual Page</s> · Constant
#[doc(alias = "VK_KHR_DYNAMIC_RENDERING_SPEC_VERSION")]
pub const KHR_DYNAMIC_RENDERING_SPEC_VERSION: u32 = 1;
///<s>Vulkan Manual Page</s> · Constant
#[doc(alias = "VK_KHR_DYNAMIC_RENDERING_EXTENSION_NAME")]
pub const KHR_DYNAMIC_RENDERING_EXTENSION_NAME: *const std::os::raw::c_char = crate::cstr!(
    "VK_KHR_dynamic_rendering"
);
///<s>Vulkan Manual Page</s> · Constant
pub const FN_CMD_BEGIN_RENDERING_KHR: *const std::os::raw::c_char = crate::cstr!(
    "vkCmdBeginRenderingKHR"
);
///<s>Vulkan Manual Page</s> · Constant
pub const FN_CMD_END_RENDERING_KHR: *const std::os::raw::c_char = crate::cstr!(
    "vkCmdEndRenderingKHR"
);
///[Vulkan Manual Page](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkRenderingFlagsKHR.html) · Alias
#[doc(alias = "VkRenderingFlagsKHR")]
#[allow(non_camel_case_types)]
pub type RenderingFlagsKHR = crate::vk1_3::RenderingFlags;
///[Vulkan Manual Page](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkRenderingFlagBitsKHR.html) · Alias
#[doc(alias = "VkRenderingFlagBitsKHR")]
#[allow(non_camel_case_types)]
pub type RenderingFlagBitsKHR = crate::vk1_3::RenderingFlagBits;
///[Vulkan Manual Page](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkPipelineRenderingCreateInfoKHR.html) · Alias
#[doc(alias = "VkPipelineRenderingCreateInfoKHR")]
#[allow(non_camel_case_types)]
pub type PipelineRenderingCreateInfoKHR = crate::vk1_3::PipelineRenderingCreateInfo;
///[Vulkan Manual Page](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkPipelineRenderingCreateInfoKHR.html) · Alias
#[doc(alias = "VkPipelineRenderingCreateInfoKHR")]
#[allow(non_camel_case_types)]
pub type PipelineRenderingCreateInfoKHRBuilder<'a> = crate::vk1_3::PipelineRenderingCreateInfoBuilder<
    'a,
>;
///[Vulkan Manual Page](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkRenderingInfoKHR.html) · Alias
#[doc(alias = "VkRenderingInfoKHR")]
#[allow(non_camel_case_types)]
pub type RenderingInfoKHR = crate::vk1_3::RenderingInfo;
///[Vulkan Manual Page](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkRenderingInfoKHR.html) · Alias
#[doc(alias = "VkRenderingInfoKHR")]
#[allow(non_camel_case_types)]
pub type RenderingInfoKHRBuilder<'a> = crate::vk1_3::RenderingInfoBuilder<'a>;
///[Vulkan Manual Page](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkRenderingAttachmentInfoKHR.html) · Alias
#[doc(alias = "VkRenderingAttachmentInfoKHR")]
#[allow(non_camel_case_types)]
pub type RenderingAttachmentInfoKHR = crate::vk1_3::RenderingAttachmentInfo;
///[Vulkan Manual Page](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkRenderingAttachmentInfoKHR.html) · Alias
#[doc(alias = "VkRenderingAttachmentInfoKHR")]
#[allow(non_camel_case_types)]
pub type RenderingAttachmentInfoKHRBuilder<'a> = crate::vk1_3::RenderingAttachmentInfoBuilder<
    'a,
>;
///[Vulkan Manual Page](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceDynamicRenderingFeaturesKHR.html) · Alias
#[doc(alias = "VkPhysicalDeviceDynamicRenderingFeaturesKHR")]
#[allow(non_camel_case_types)]
pub type PhysicalDeviceDynamicRenderingFeaturesKHR = crate::vk1_3::PhysicalDeviceDynamicRenderingFeatures;
///[Vulkan Manual Page](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceDynamicRenderingFeaturesKHR.html) · Alias
#[doc(alias = "VkPhysicalDeviceDynamicRenderingFeaturesKHR")]
#[allow(non_camel_case_types)]
pub type PhysicalDeviceDynamicRenderingFeaturesKHRBuilder<'a> = crate::vk1_3::PhysicalDeviceDynamicRenderingFeaturesBuilder<
    'a,
>;
///[Vulkan Manual Page](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkCommandBufferInheritanceRenderingInfoKHR.html) · Alias
#[doc(alias = "VkCommandBufferInheritanceRenderingInfoKHR")]
#[allow(non_camel_case_types)]
pub type CommandBufferInheritanceRenderingInfoKHR = crate::vk1_3::CommandBufferInheritanceRenderingInfo;
///[Vulkan Manual Page](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkCommandBufferInheritanceRenderingInfoKHR.html) · Alias
#[doc(alias = "VkCommandBufferInheritanceRenderingInfoKHR")]
#[allow(non_camel_case_types)]
pub type CommandBufferInheritanceRenderingInfoKHRBuilder<'a> = crate::vk1_3::CommandBufferInheritanceRenderingInfoBuilder<
    'a,
>;
///[Vulkan Manual Page](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkAttachmentSampleCountInfoNV.html) · Alias
#[doc(alias = "VkAttachmentSampleCountInfoNV")]
#[allow(non_camel_case_types)]
pub type AttachmentSampleCountInfoNV = crate::extensions::khr_dynamic_rendering::AttachmentSampleCountInfoAMD;
///[Vulkan Manual Page](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkAttachmentSampleCountInfoNV.html) · Alias
#[doc(alias = "VkAttachmentSampleCountInfoNV")]
#[allow(non_camel_case_types)]
pub type AttachmentSampleCountInfoNVBuilder<'a> = crate::extensions::khr_dynamic_rendering::AttachmentSampleCountInfoAMDBuilder<
    'a,
>;
///[Vulkan Manual Page](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/vkCmdBeginRenderingKHR.html) · Alias
#[allow(non_camel_case_types)]
pub type PFN_vkCmdBeginRenderingKHR = crate::vk1_3::PFN_vkCmdBeginRendering;
///[Vulkan Manual Page](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/vkCmdEndRenderingKHR.html) · Alias
#[allow(non_camel_case_types)]
pub type PFN_vkCmdEndRenderingKHR = crate::vk1_3::PFN_vkCmdEndRendering;
///Provided by [`crate::extensions::khr_dynamic_rendering`]
impl crate::vk1_0::AttachmentStoreOp {
    pub const NONE_KHR: Self = Self::NONE;
}
///Provided by [`crate::extensions::khr_dynamic_rendering`]
impl crate::vk1_0::PipelineCreateFlagBits {
    pub const RENDERING_FRAGMENT_SHADING_RATE_ATTACHMENT_KHR: Self = Self(2097152);
    pub const RENDERING_FRAGMENT_DENSITY_MAP_ATTACHMENT_EXT: Self = Self(4194304);
    #[deprecated]
    pub const PIPELINE_RASTERIZATION_STATE_CREATE_FRAGMENT_SHADING_RATE_ATTACHMENT_KHR: Self = Self::RENDERING_FRAGMENT_SHADING_RATE_ATTACHMENT_KHR;
    #[deprecated]
    pub const PIPELINE_RASTERIZATION_STATE_CREATE_FRAGMENT_DENSITY_MAP_ATTACHMENT_EXT: Self = Self::RENDERING_FRAGMENT_DENSITY_MAP_ATTACHMENT_EXT;
}
///Provided by [`crate::extensions::khr_dynamic_rendering`]
impl crate::vk1_0::StructureType {
    pub const RENDERING_FRAGMENT_SHADING_RATE_ATTACHMENT_INFO_KHR: Self = Self(
        1000044006,
    );
    pub const RENDERING_FRAGMENT_DENSITY_MAP_ATTACHMENT_INFO_EXT: Self = Self(
        1000044007,
    );
    pub const ATTACHMENT_SAMPLE_COUNT_INFO_AMD: Self = Self(1000044008);
    pub const MULTIVIEW_PER_VIEW_ATTRIBUTES_INFO_NVX: Self = Self(1000044009);
    pub const RENDERING_INFO_KHR: Self = Self::RENDERING_INFO;
    pub const RENDERING_ATTACHMENT_INFO_KHR: Self = Self::RENDERING_ATTACHMENT_INFO;
    pub const PIPELINE_RENDERING_CREATE_INFO_KHR: Self = Self::PIPELINE_RENDERING_CREATE_INFO;
    pub const PHYSICAL_DEVICE_DYNAMIC_RENDERING_FEATURES_KHR: Self = Self::PHYSICAL_DEVICE_DYNAMIC_RENDERING_FEATURES;
    pub const COMMAND_BUFFER_INHERITANCE_RENDERING_INFO_KHR: Self = Self::COMMAND_BUFFER_INHERITANCE_RENDERING_INFO;
    pub const ATTACHMENT_SAMPLE_COUNT_INFO_NV: Self = Self::ATTACHMENT_SAMPLE_COUNT_INFO_AMD;
}
impl<'a> crate::ExtendableFrom<'a, AttachmentSampleCountInfoAMD>
for crate::vk1_0::GraphicsPipelineCreateInfoBuilder<'a> {}
impl<'a> crate::ExtendableFrom<'a, AttachmentSampleCountInfoAMDBuilder<'_>>
for crate::vk1_0::GraphicsPipelineCreateInfoBuilder<'a> {}
impl<'a> crate::ExtendableFrom<'a, MultiviewPerViewAttributesInfoNVX>
for crate::vk1_0::GraphicsPipelineCreateInfoBuilder<'a> {}
impl<'a> crate::ExtendableFrom<'a, MultiviewPerViewAttributesInfoNVXBuilder<'_>>
for crate::vk1_0::GraphicsPipelineCreateInfoBuilder<'a> {}
impl<'a> crate::ExtendableFrom<'a, AttachmentSampleCountInfoAMD>
for crate::vk1_0::CommandBufferInheritanceInfoBuilder<'a> {}
impl<'a> crate::ExtendableFrom<'a, AttachmentSampleCountInfoAMDBuilder<'_>>
for crate::vk1_0::CommandBufferInheritanceInfoBuilder<'a> {}
impl<'a> crate::ExtendableFrom<'a, MultiviewPerViewAttributesInfoNVX>
for crate::vk1_0::CommandBufferInheritanceInfoBuilder<'a> {}
impl<'a> crate::ExtendableFrom<'a, MultiviewPerViewAttributesInfoNVXBuilder<'_>>
for crate::vk1_0::CommandBufferInheritanceInfoBuilder<'a> {}
impl<'a> crate::ExtendableFrom<'a, RenderingFragmentShadingRateAttachmentInfoKHR>
for crate::vk1_3::RenderingInfoBuilder<'a> {}
impl<
    'a,
> crate::ExtendableFrom<'a, RenderingFragmentShadingRateAttachmentInfoKHRBuilder<'_>>
for crate::vk1_3::RenderingInfoBuilder<'a> {}
impl<'a> crate::ExtendableFrom<'a, RenderingFragmentDensityMapAttachmentInfoEXT>
for crate::vk1_3::RenderingInfoBuilder<'a> {}
impl<
    'a,
> crate::ExtendableFrom<'a, RenderingFragmentDensityMapAttachmentInfoEXTBuilder<'_>>
for crate::vk1_3::RenderingInfoBuilder<'a> {}
impl<'a> crate::ExtendableFrom<'a, MultiviewPerViewAttributesInfoNVX>
for crate::vk1_3::RenderingInfoBuilder<'a> {}
impl<'a> crate::ExtendableFrom<'a, MultiviewPerViewAttributesInfoNVXBuilder<'_>>
for crate::vk1_3::RenderingInfoBuilder<'a> {}
///[Vulkan Manual Page](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkRenderingFragmentShadingRateAttachmentInfoKHR.html) · Structure
#[doc(alias = "VkRenderingFragmentShadingRateAttachmentInfoKHR")]
#[derive(Copy, Clone)]
#[repr(C)]
pub struct RenderingFragmentShadingRateAttachmentInfoKHR {
    pub s_type: crate::vk1_0::StructureType,
    pub p_next: *const std::ffi::c_void,
    pub image_view: crate::vk1_0::ImageView,
    pub image_layout: crate::vk1_0::ImageLayout,
    pub shading_rate_attachment_texel_size: crate::vk1_0::Extent2D,
}
impl RenderingFragmentShadingRateAttachmentInfoKHR {
    pub const STRUCTURE_TYPE: crate::vk1_0::StructureType = crate::vk1_0::StructureType::RENDERING_FRAGMENT_SHADING_RATE_ATTACHMENT_INFO_KHR;
}
impl Default for RenderingFragmentShadingRateAttachmentInfoKHR {
    fn default() -> Self {
        Self {
            s_type: Self::STRUCTURE_TYPE,
            p_next: std::ptr::null(),
            image_view: Default::default(),
            image_layout: Default::default(),
            shading_rate_attachment_texel_size: Default::default(),
        }
    }
}
impl std::fmt::Debug for RenderingFragmentShadingRateAttachmentInfoKHR {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        f.debug_struct("RenderingFragmentShadingRateAttachmentInfoKHR")
            .field("s_type", &self.s_type)
            .field("p_next", &self.p_next)
            .field("image_view", &self.image_view)
            .field("image_layout", &self.image_layout)
            .field(
                "shading_rate_attachment_texel_size",
                &self.shading_rate_attachment_texel_size,
            )
            .finish()
    }
}
impl RenderingFragmentShadingRateAttachmentInfoKHR {
    #[inline]
    pub fn into_builder<'a>(
        self,
    ) -> RenderingFragmentShadingRateAttachmentInfoKHRBuilder<'a> {
        RenderingFragmentShadingRateAttachmentInfoKHRBuilder(
            self,
            std::marker::PhantomData,
        )
    }
}
#[derive(Copy, Clone)]
///[Vulkan Manual Page](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkRenderingFragmentShadingRateAttachmentInfoKHR.html) · Builder of [`RenderingFragmentShadingRateAttachmentInfoKHR`]
#[repr(transparent)]
pub struct RenderingFragmentShadingRateAttachmentInfoKHRBuilder<'a>(
    RenderingFragmentShadingRateAttachmentInfoKHR,
    std::marker::PhantomData<&'a ()>,
);
impl<'a> RenderingFragmentShadingRateAttachmentInfoKHRBuilder<'a> {
    #[inline]
    pub fn new() -> RenderingFragmentShadingRateAttachmentInfoKHRBuilder<'a> {
        RenderingFragmentShadingRateAttachmentInfoKHRBuilder(
            Default::default(),
            std::marker::PhantomData,
        )
    }
    #[inline]
    #[must_use]
    pub fn image_view(mut self, image_view: crate::vk1_0::ImageView) -> Self {
        self.0.image_view = image_view as _;
        self
    }
    #[inline]
    #[must_use]
    pub fn image_layout(mut self, image_layout: crate::vk1_0::ImageLayout) -> Self {
        self.0.image_layout = image_layout as _;
        self
    }
    #[inline]
    #[must_use]
    pub fn shading_rate_attachment_texel_size(
        mut self,
        shading_rate_attachment_texel_size: crate::vk1_0::Extent2D,
    ) -> Self {
        self
            .0
            .shading_rate_attachment_texel_size = shading_rate_attachment_texel_size
            as _;
        self
    }
    #[inline]
    /// Discards all lifetime information.
    /// Use the `Deref` and `DerefMut` implementations if possible.
    pub fn build_dangling(self) -> RenderingFragmentShadingRateAttachmentInfoKHR {
        self.0
    }
}
impl<'a> std::default::Default
for RenderingFragmentShadingRateAttachmentInfoKHRBuilder<'a> {
    fn default() -> RenderingFragmentShadingRateAttachmentInfoKHRBuilder<'a> {
        Self::new()
    }
}
impl<'a> std::fmt::Debug for RenderingFragmentShadingRateAttachmentInfoKHRBuilder<'a> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        std::fmt::Debug::fmt(&self.0, f)
    }
}
impl<'a> std::ops::Deref for RenderingFragmentShadingRateAttachmentInfoKHRBuilder<'a> {
    type Target = RenderingFragmentShadingRateAttachmentInfoKHR;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'a> std::ops::DerefMut
for RenderingFragmentShadingRateAttachmentInfoKHRBuilder<'a> {
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.0
    }
}
///[Vulkan Manual Page](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkRenderingFragmentDensityMapAttachmentInfoEXT.html) · Structure
#[doc(alias = "VkRenderingFragmentDensityMapAttachmentInfoEXT")]
#[derive(Copy, Clone)]
#[repr(C)]
pub struct RenderingFragmentDensityMapAttachmentInfoEXT {
    pub s_type: crate::vk1_0::StructureType,
    pub p_next: *const std::ffi::c_void,
    pub image_view: crate::vk1_0::ImageView,
    pub image_layout: crate::vk1_0::ImageLayout,
}
impl RenderingFragmentDensityMapAttachmentInfoEXT {
    pub const STRUCTURE_TYPE: crate::vk1_0::StructureType = crate::vk1_0::StructureType::RENDERING_FRAGMENT_DENSITY_MAP_ATTACHMENT_INFO_EXT;
}
impl Default for RenderingFragmentDensityMapAttachmentInfoEXT {
    fn default() -> Self {
        Self {
            s_type: Self::STRUCTURE_TYPE,
            p_next: std::ptr::null(),
            image_view: Default::default(),
            image_layout: Default::default(),
        }
    }
}
impl std::fmt::Debug for RenderingFragmentDensityMapAttachmentInfoEXT {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        f.debug_struct("RenderingFragmentDensityMapAttachmentInfoEXT")
            .field("s_type", &self.s_type)
            .field("p_next", &self.p_next)
            .field("image_view", &self.image_view)
            .field("image_layout", &self.image_layout)
            .finish()
    }
}
impl RenderingFragmentDensityMapAttachmentInfoEXT {
    #[inline]
    pub fn into_builder<'a>(
        self,
    ) -> RenderingFragmentDensityMapAttachmentInfoEXTBuilder<'a> {
        RenderingFragmentDensityMapAttachmentInfoEXTBuilder(
            self,
            std::marker::PhantomData,
        )
    }
}
#[derive(Copy, Clone)]
///[Vulkan Manual Page](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkRenderingFragmentDensityMapAttachmentInfoEXT.html) · Builder of [`RenderingFragmentDensityMapAttachmentInfoEXT`]
#[repr(transparent)]
pub struct RenderingFragmentDensityMapAttachmentInfoEXTBuilder<'a>(
    RenderingFragmentDensityMapAttachmentInfoEXT,
    std::marker::PhantomData<&'a ()>,
);
impl<'a> RenderingFragmentDensityMapAttachmentInfoEXTBuilder<'a> {
    #[inline]
    pub fn new() -> RenderingFragmentDensityMapAttachmentInfoEXTBuilder<'a> {
        RenderingFragmentDensityMapAttachmentInfoEXTBuilder(
            Default::default(),
            std::marker::PhantomData,
        )
    }
    #[inline]
    #[must_use]
    pub fn image_view(mut self, image_view: crate::vk1_0::ImageView) -> Self {
        self.0.image_view = image_view as _;
        self
    }
    #[inline]
    #[must_use]
    pub fn image_layout(mut self, image_layout: crate::vk1_0::ImageLayout) -> Self {
        self.0.image_layout = image_layout as _;
        self
    }
    #[inline]
    /// Discards all lifetime information.
    /// Use the `Deref` and `DerefMut` implementations if possible.
    pub fn build_dangling(self) -> RenderingFragmentDensityMapAttachmentInfoEXT {
        self.0
    }
}
impl<'a> std::default::Default
for RenderingFragmentDensityMapAttachmentInfoEXTBuilder<'a> {
    fn default() -> RenderingFragmentDensityMapAttachmentInfoEXTBuilder<'a> {
        Self::new()
    }
}
impl<'a> std::fmt::Debug for RenderingFragmentDensityMapAttachmentInfoEXTBuilder<'a> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        std::fmt::Debug::fmt(&self.0, f)
    }
}
impl<'a> std::ops::Deref for RenderingFragmentDensityMapAttachmentInfoEXTBuilder<'a> {
    type Target = RenderingFragmentDensityMapAttachmentInfoEXT;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'a> std::ops::DerefMut for RenderingFragmentDensityMapAttachmentInfoEXTBuilder<'a> {
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.0
    }
}
///[Vulkan Manual Page](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkAttachmentSampleCountInfoAMD.html) · Structure
#[doc(alias = "VkAttachmentSampleCountInfoAMD")]
#[derive(Copy, Clone)]
#[repr(C)]
pub struct AttachmentSampleCountInfoAMD {
    pub s_type: crate::vk1_0::StructureType,
    pub p_next: *const std::ffi::c_void,
    pub color_attachment_count: u32,
    pub p_color_attachment_samples: *const crate::vk1_0::SampleCountFlagBits,
    pub depth_stencil_attachment_samples: crate::vk1_0::SampleCountFlagBits,
}
impl AttachmentSampleCountInfoAMD {
    pub const STRUCTURE_TYPE: crate::vk1_0::StructureType = crate::vk1_0::StructureType::ATTACHMENT_SAMPLE_COUNT_INFO_AMD;
}
impl Default for AttachmentSampleCountInfoAMD {
    fn default() -> Self {
        Self {
            s_type: Self::STRUCTURE_TYPE,
            p_next: std::ptr::null(),
            color_attachment_count: Default::default(),
            p_color_attachment_samples: std::ptr::null(),
            depth_stencil_attachment_samples: Default::default(),
        }
    }
}
impl std::fmt::Debug for AttachmentSampleCountInfoAMD {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        f.debug_struct("AttachmentSampleCountInfoAMD")
            .field("s_type", &self.s_type)
            .field("p_next", &self.p_next)
            .field("color_attachment_count", &self.color_attachment_count)
            .field("p_color_attachment_samples", &self.p_color_attachment_samples)
            .field(
                "depth_stencil_attachment_samples",
                &self.depth_stencil_attachment_samples,
            )
            .finish()
    }
}
impl AttachmentSampleCountInfoAMD {
    #[inline]
    pub fn into_builder<'a>(self) -> AttachmentSampleCountInfoAMDBuilder<'a> {
        AttachmentSampleCountInfoAMDBuilder(self, std::marker::PhantomData)
    }
}
#[derive(Copy, Clone)]
///[Vulkan Manual Page](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkAttachmentSampleCountInfoAMD.html) · Builder of [`AttachmentSampleCountInfoAMD`]
#[repr(transparent)]
pub struct AttachmentSampleCountInfoAMDBuilder<'a>(
    AttachmentSampleCountInfoAMD,
    std::marker::PhantomData<&'a ()>,
);
impl<'a> AttachmentSampleCountInfoAMDBuilder<'a> {
    #[inline]
    pub fn new() -> AttachmentSampleCountInfoAMDBuilder<'a> {
        AttachmentSampleCountInfoAMDBuilder(Default::default(), std::marker::PhantomData)
    }
    #[inline]
    #[must_use]
    pub fn color_attachment_samples(
        mut self,
        color_attachment_samples: &'a [crate::vk1_0::SampleCountFlagBits],
    ) -> Self {
        self.0.p_color_attachment_samples = color_attachment_samples.as_ptr() as _;
        self.0.color_attachment_count = color_attachment_samples.len() as _;
        self
    }
    #[inline]
    #[must_use]
    pub fn depth_stencil_attachment_samples(
        mut self,
        depth_stencil_attachment_samples: crate::vk1_0::SampleCountFlagBits,
    ) -> Self {
        self.0.depth_stencil_attachment_samples = depth_stencil_attachment_samples as _;
        self
    }
    #[inline]
    /// Discards all lifetime information.
    /// Use the `Deref` and `DerefMut` implementations if possible.
    pub fn build_dangling(self) -> AttachmentSampleCountInfoAMD {
        self.0
    }
}
impl<'a> std::default::Default for AttachmentSampleCountInfoAMDBuilder<'a> {
    fn default() -> AttachmentSampleCountInfoAMDBuilder<'a> {
        Self::new()
    }
}
impl<'a> std::fmt::Debug for AttachmentSampleCountInfoAMDBuilder<'a> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        std::fmt::Debug::fmt(&self.0, f)
    }
}
impl<'a> std::ops::Deref for AttachmentSampleCountInfoAMDBuilder<'a> {
    type Target = AttachmentSampleCountInfoAMD;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'a> std::ops::DerefMut for AttachmentSampleCountInfoAMDBuilder<'a> {
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.0
    }
}
///[Vulkan Manual Page](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkMultiviewPerViewAttributesInfoNVX.html) · Structure
#[doc(alias = "VkMultiviewPerViewAttributesInfoNVX")]
#[derive(Copy, Clone)]
#[repr(C)]
pub struct MultiviewPerViewAttributesInfoNVX {
    pub s_type: crate::vk1_0::StructureType,
    pub p_next: *const std::ffi::c_void,
    pub per_view_attributes: crate::vk1_0::Bool32,
    pub per_view_attributes_position_x_only: crate::vk1_0::Bool32,
}
impl MultiviewPerViewAttributesInfoNVX {
    pub const STRUCTURE_TYPE: crate::vk1_0::StructureType = crate::vk1_0::StructureType::MULTIVIEW_PER_VIEW_ATTRIBUTES_INFO_NVX;
}
impl Default for MultiviewPerViewAttributesInfoNVX {
    fn default() -> Self {
        Self {
            s_type: Self::STRUCTURE_TYPE,
            p_next: std::ptr::null(),
            per_view_attributes: Default::default(),
            per_view_attributes_position_x_only: Default::default(),
        }
    }
}
impl std::fmt::Debug for MultiviewPerViewAttributesInfoNVX {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        f.debug_struct("MultiviewPerViewAttributesInfoNVX")
            .field("s_type", &self.s_type)
            .field("p_next", &self.p_next)
            .field("per_view_attributes", &(self.per_view_attributes != 0))
            .field(
                "per_view_attributes_position_x_only",
                &(self.per_view_attributes_position_x_only != 0),
            )
            .finish()
    }
}
impl MultiviewPerViewAttributesInfoNVX {
    #[inline]
    pub fn into_builder<'a>(self) -> MultiviewPerViewAttributesInfoNVXBuilder<'a> {
        MultiviewPerViewAttributesInfoNVXBuilder(self, std::marker::PhantomData)
    }
}
#[derive(Copy, Clone)]
///[Vulkan Manual Page](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkMultiviewPerViewAttributesInfoNVX.html) · Builder of [`MultiviewPerViewAttributesInfoNVX`]
#[repr(transparent)]
pub struct MultiviewPerViewAttributesInfoNVXBuilder<'a>(
    MultiviewPerViewAttributesInfoNVX,
    std::marker::PhantomData<&'a ()>,
);
impl<'a> MultiviewPerViewAttributesInfoNVXBuilder<'a> {
    #[inline]
    pub fn new() -> MultiviewPerViewAttributesInfoNVXBuilder<'a> {
        MultiviewPerViewAttributesInfoNVXBuilder(
            Default::default(),
            std::marker::PhantomData,
        )
    }
    #[inline]
    #[must_use]
    pub fn per_view_attributes(mut self, per_view_attributes: bool) -> Self {
        self.0.per_view_attributes = per_view_attributes as _;
        self
    }
    #[inline]
    #[must_use]
    pub fn per_view_attributes_position_x_only(
        mut self,
        per_view_attributes_position_x_only: bool,
    ) -> Self {
        self
            .0
            .per_view_attributes_position_x_only = per_view_attributes_position_x_only
            as _;
        self
    }
    #[inline]
    /// Discards all lifetime information.
    /// Use the `Deref` and `DerefMut` implementations if possible.
    pub fn build_dangling(self) -> MultiviewPerViewAttributesInfoNVX {
        self.0
    }
}
impl<'a> std::default::Default for MultiviewPerViewAttributesInfoNVXBuilder<'a> {
    fn default() -> MultiviewPerViewAttributesInfoNVXBuilder<'a> {
        Self::new()
    }
}
impl<'a> std::fmt::Debug for MultiviewPerViewAttributesInfoNVXBuilder<'a> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        std::fmt::Debug::fmt(&self.0, f)
    }
}
impl<'a> std::ops::Deref for MultiviewPerViewAttributesInfoNVXBuilder<'a> {
    type Target = MultiviewPerViewAttributesInfoNVX;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'a> std::ops::DerefMut for MultiviewPerViewAttributesInfoNVXBuilder<'a> {
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.0
    }
}
///Provided by [`crate::extensions::khr_dynamic_rendering`]
impl crate::DeviceLoader {
    #[inline]
    #[track_caller]
    ///[Vulkan Manual Page](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/vkCmdBeginRenderingKHR.html) · Function
    #[doc(alias = "vkCmdBeginRenderingKHR")]
    pub unsafe fn cmd_begin_rendering_khr(
        &self,
        command_buffer: crate::vk1_0::CommandBuffer,
        rendering_info: &crate::vk1_3::RenderingInfo,
    ) -> () {
        let _function = self.cmd_begin_rendering_khr.expect(crate::NOT_LOADED_MESSAGE);
        let _return = _function(command_buffer as _, rendering_info as _);
        ()
    }
    #[inline]
    #[track_caller]
    ///[Vulkan Manual Page](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/vkCmdEndRenderingKHR.html) · Function
    #[doc(alias = "vkCmdEndRenderingKHR")]
    pub unsafe fn cmd_end_rendering_khr(
        &self,
        command_buffer: crate::vk1_0::CommandBuffer,
    ) -> () {
        let _function = self.cmd_end_rendering_khr.expect(crate::NOT_LOADED_MESSAGE);
        let _return = _function(command_buffer as _);
        ()
    }
}
