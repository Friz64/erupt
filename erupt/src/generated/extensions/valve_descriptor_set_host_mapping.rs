// DO NOT EDIT: @generated by erupt's generator
///<s>Vulkan Manual Page</s> · Constant
#[doc(alias = "VK_VALVE_DESCRIPTOR_SET_HOST_MAPPING_SPEC_VERSION")]
pub const VALVE_DESCRIPTOR_SET_HOST_MAPPING_SPEC_VERSION: u32 = 1;
///<s>Vulkan Manual Page</s> · Constant
#[doc(alias = "VK_VALVE_DESCRIPTOR_SET_HOST_MAPPING_EXTENSION_NAME")]
pub const VALVE_DESCRIPTOR_SET_HOST_MAPPING_EXTENSION_NAME: *const std::os::raw::c_char = crate::cstr!(
    "VK_VALVE_descriptor_set_host_mapping"
);
///<s>Vulkan Manual Page</s> · Constant
pub const FN_GET_DESCRIPTOR_SET_LAYOUT_HOST_MAPPING_INFO_VALVE: *const std::os::raw::c_char = crate::cstr!(
    "vkGetDescriptorSetLayoutHostMappingInfoVALVE"
);
///<s>Vulkan Manual Page</s> · Constant
pub const FN_GET_DESCRIPTOR_SET_HOST_MAPPING_VALVE: *const std::os::raw::c_char = crate::cstr!(
    "vkGetDescriptorSetHostMappingVALVE"
);
///Provided by [`crate::extensions::valve_descriptor_set_host_mapping`]
impl crate::vk1_0::StructureType {
    pub const PHYSICAL_DEVICE_DESCRIPTOR_SET_HOST_MAPPING_FEATURES_VALVE: Self = Self(
        1000420000,
    );
    pub const DESCRIPTOR_SET_BINDING_REFERENCE_VALVE: Self = Self(1000420001);
    pub const DESCRIPTOR_SET_LAYOUT_HOST_MAPPING_INFO_VALVE: Self = Self(1000420002);
}
///[Vulkan Manual Page](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/vkGetDescriptorSetLayoutHostMappingInfoVALVE.html) · Function
#[allow(non_camel_case_types)]
pub type PFN_vkGetDescriptorSetLayoutHostMappingInfoVALVE = unsafe extern "system" fn(
    device: crate::vk1_0::Device,
    p_binding_reference: *const crate::extensions::valve_descriptor_set_host_mapping::DescriptorSetBindingReferenceVALVE,
    p_host_mapping: *mut crate::extensions::valve_descriptor_set_host_mapping::DescriptorSetLayoutHostMappingInfoVALVE,
) -> ();
///[Vulkan Manual Page](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/vkGetDescriptorSetHostMappingVALVE.html) · Function
#[allow(non_camel_case_types)]
pub type PFN_vkGetDescriptorSetHostMappingVALVE = unsafe extern "system" fn(
    device: crate::vk1_0::Device,
    descriptor_set: crate::vk1_0::DescriptorSet,
    pp_data: *mut *mut std::ffi::c_void,
) -> ();
impl<'a> crate::ExtendableFrom<'a, PhysicalDeviceDescriptorSetHostMappingFeaturesVALVE>
for crate::vk1_0::DeviceCreateInfoBuilder<'a> {}
impl<
    'a,
> crate::ExtendableFrom<
    'a,
    PhysicalDeviceDescriptorSetHostMappingFeaturesVALVEBuilder<'_>,
> for crate::vk1_0::DeviceCreateInfoBuilder<'a> {}
impl<'a> crate::ExtendableFrom<'a, PhysicalDeviceDescriptorSetHostMappingFeaturesVALVE>
for crate::vk1_1::PhysicalDeviceFeatures2Builder<'a> {}
impl<
    'a,
> crate::ExtendableFrom<
    'a,
    PhysicalDeviceDescriptorSetHostMappingFeaturesVALVEBuilder<'_>,
> for crate::vk1_1::PhysicalDeviceFeatures2Builder<'a> {}
///[Vulkan Manual Page](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceDescriptorSetHostMappingFeaturesVALVE.html) · Structure
#[doc(alias = "VkPhysicalDeviceDescriptorSetHostMappingFeaturesVALVE")]
#[derive(Copy, Clone)]
#[repr(C)]
pub struct PhysicalDeviceDescriptorSetHostMappingFeaturesVALVE {
    pub s_type: crate::vk1_0::StructureType,
    pub p_next: *mut std::ffi::c_void,
    pub descriptor_set_host_mapping: crate::vk1_0::Bool32,
}
impl PhysicalDeviceDescriptorSetHostMappingFeaturesVALVE {
    pub const STRUCTURE_TYPE: crate::vk1_0::StructureType = crate::vk1_0::StructureType::PHYSICAL_DEVICE_DESCRIPTOR_SET_HOST_MAPPING_FEATURES_VALVE;
}
impl Default for PhysicalDeviceDescriptorSetHostMappingFeaturesVALVE {
    fn default() -> Self {
        Self {
            s_type: Self::STRUCTURE_TYPE,
            p_next: std::ptr::null_mut(),
            descriptor_set_host_mapping: Default::default(),
        }
    }
}
impl std::fmt::Debug for PhysicalDeviceDescriptorSetHostMappingFeaturesVALVE {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        f.debug_struct("PhysicalDeviceDescriptorSetHostMappingFeaturesVALVE")
            .field("s_type", &self.s_type)
            .field("p_next", &self.p_next)
            .field(
                "descriptor_set_host_mapping",
                &(self.descriptor_set_host_mapping != 0),
            )
            .finish()
    }
}
impl PhysicalDeviceDescriptorSetHostMappingFeaturesVALVE {
    #[inline]
    pub fn into_builder<'a>(
        self,
    ) -> PhysicalDeviceDescriptorSetHostMappingFeaturesVALVEBuilder<'a> {
        PhysicalDeviceDescriptorSetHostMappingFeaturesVALVEBuilder(
            self,
            std::marker::PhantomData,
        )
    }
}
#[derive(Copy, Clone)]
///[Vulkan Manual Page](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceDescriptorSetHostMappingFeaturesVALVE.html) · Builder of [`PhysicalDeviceDescriptorSetHostMappingFeaturesVALVE`]
#[repr(transparent)]
pub struct PhysicalDeviceDescriptorSetHostMappingFeaturesVALVEBuilder<'a>(
    PhysicalDeviceDescriptorSetHostMappingFeaturesVALVE,
    std::marker::PhantomData<&'a ()>,
);
impl<'a> PhysicalDeviceDescriptorSetHostMappingFeaturesVALVEBuilder<'a> {
    #[inline]
    pub fn new() -> PhysicalDeviceDescriptorSetHostMappingFeaturesVALVEBuilder<'a> {
        PhysicalDeviceDescriptorSetHostMappingFeaturesVALVEBuilder(
            Default::default(),
            std::marker::PhantomData,
        )
    }
    #[inline]
    #[must_use]
    pub fn descriptor_set_host_mapping(
        mut self,
        descriptor_set_host_mapping: bool,
    ) -> Self {
        self.0.descriptor_set_host_mapping = descriptor_set_host_mapping as _;
        self
    }
    #[inline]
    /// Discards all lifetime information.
    /// Use the `Deref` and `DerefMut` implementations if possible.
    pub fn build_dangling(self) -> PhysicalDeviceDescriptorSetHostMappingFeaturesVALVE {
        self.0
    }
}
impl<'a> std::default::Default
for PhysicalDeviceDescriptorSetHostMappingFeaturesVALVEBuilder<'a> {
    fn default() -> PhysicalDeviceDescriptorSetHostMappingFeaturesVALVEBuilder<'a> {
        Self::new()
    }
}
impl<'a> std::fmt::Debug
for PhysicalDeviceDescriptorSetHostMappingFeaturesVALVEBuilder<'a> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        std::fmt::Debug::fmt(&self.0, f)
    }
}
impl<'a> std::ops::Deref
for PhysicalDeviceDescriptorSetHostMappingFeaturesVALVEBuilder<'a> {
    type Target = PhysicalDeviceDescriptorSetHostMappingFeaturesVALVE;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'a> std::ops::DerefMut
for PhysicalDeviceDescriptorSetHostMappingFeaturesVALVEBuilder<'a> {
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.0
    }
}
///[Vulkan Manual Page](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkDescriptorSetBindingReferenceVALVE.html) · Structure
#[doc(alias = "VkDescriptorSetBindingReferenceVALVE")]
#[derive(Copy, Clone)]
#[repr(C)]
pub struct DescriptorSetBindingReferenceVALVE {
    pub s_type: crate::vk1_0::StructureType,
    pub p_next: *const std::ffi::c_void,
    pub descriptor_set_layout: crate::vk1_0::DescriptorSetLayout,
    pub binding: u32,
}
impl DescriptorSetBindingReferenceVALVE {
    pub const STRUCTURE_TYPE: crate::vk1_0::StructureType = crate::vk1_0::StructureType::DESCRIPTOR_SET_BINDING_REFERENCE_VALVE;
}
impl Default for DescriptorSetBindingReferenceVALVE {
    fn default() -> Self {
        Self {
            s_type: Self::STRUCTURE_TYPE,
            p_next: std::ptr::null(),
            descriptor_set_layout: Default::default(),
            binding: Default::default(),
        }
    }
}
impl std::fmt::Debug for DescriptorSetBindingReferenceVALVE {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        f.debug_struct("DescriptorSetBindingReferenceVALVE")
            .field("s_type", &self.s_type)
            .field("p_next", &self.p_next)
            .field("descriptor_set_layout", &self.descriptor_set_layout)
            .field("binding", &self.binding)
            .finish()
    }
}
impl DescriptorSetBindingReferenceVALVE {
    #[inline]
    pub fn into_builder<'a>(self) -> DescriptorSetBindingReferenceVALVEBuilder<'a> {
        DescriptorSetBindingReferenceVALVEBuilder(self, std::marker::PhantomData)
    }
}
#[derive(Copy, Clone)]
///[Vulkan Manual Page](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkDescriptorSetBindingReferenceVALVE.html) · Builder of [`DescriptorSetBindingReferenceVALVE`]
#[repr(transparent)]
pub struct DescriptorSetBindingReferenceVALVEBuilder<'a>(
    DescriptorSetBindingReferenceVALVE,
    std::marker::PhantomData<&'a ()>,
);
impl<'a> DescriptorSetBindingReferenceVALVEBuilder<'a> {
    #[inline]
    pub fn new() -> DescriptorSetBindingReferenceVALVEBuilder<'a> {
        DescriptorSetBindingReferenceVALVEBuilder(
            Default::default(),
            std::marker::PhantomData,
        )
    }
    #[inline]
    #[must_use]
    pub fn descriptor_set_layout(
        mut self,
        descriptor_set_layout: crate::vk1_0::DescriptorSetLayout,
    ) -> Self {
        self.0.descriptor_set_layout = descriptor_set_layout as _;
        self
    }
    #[inline]
    #[must_use]
    pub fn binding(mut self, binding: u32) -> Self {
        self.0.binding = binding as _;
        self
    }
    #[inline]
    /// Discards all lifetime information.
    /// Use the `Deref` and `DerefMut` implementations if possible.
    pub fn build_dangling(self) -> DescriptorSetBindingReferenceVALVE {
        self.0
    }
}
impl<'a> std::default::Default for DescriptorSetBindingReferenceVALVEBuilder<'a> {
    fn default() -> DescriptorSetBindingReferenceVALVEBuilder<'a> {
        Self::new()
    }
}
impl<'a> std::fmt::Debug for DescriptorSetBindingReferenceVALVEBuilder<'a> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        std::fmt::Debug::fmt(&self.0, f)
    }
}
impl<'a> std::ops::Deref for DescriptorSetBindingReferenceVALVEBuilder<'a> {
    type Target = DescriptorSetBindingReferenceVALVE;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'a> std::ops::DerefMut for DescriptorSetBindingReferenceVALVEBuilder<'a> {
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.0
    }
}
///[Vulkan Manual Page](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkDescriptorSetLayoutHostMappingInfoVALVE.html) · Structure
#[doc(alias = "VkDescriptorSetLayoutHostMappingInfoVALVE")]
#[derive(Copy, Clone)]
#[repr(C)]
pub struct DescriptorSetLayoutHostMappingInfoVALVE {
    pub s_type: crate::vk1_0::StructureType,
    pub p_next: *mut std::ffi::c_void,
    pub descriptor_offset: usize,
    pub descriptor_size: u32,
}
impl DescriptorSetLayoutHostMappingInfoVALVE {
    pub const STRUCTURE_TYPE: crate::vk1_0::StructureType = crate::vk1_0::StructureType::DESCRIPTOR_SET_LAYOUT_HOST_MAPPING_INFO_VALVE;
}
impl Default for DescriptorSetLayoutHostMappingInfoVALVE {
    fn default() -> Self {
        Self {
            s_type: Self::STRUCTURE_TYPE,
            p_next: std::ptr::null_mut(),
            descriptor_offset: Default::default(),
            descriptor_size: Default::default(),
        }
    }
}
impl std::fmt::Debug for DescriptorSetLayoutHostMappingInfoVALVE {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        f.debug_struct("DescriptorSetLayoutHostMappingInfoVALVE")
            .field("s_type", &self.s_type)
            .field("p_next", &self.p_next)
            .field("descriptor_offset", &self.descriptor_offset)
            .field("descriptor_size", &self.descriptor_size)
            .finish()
    }
}
impl DescriptorSetLayoutHostMappingInfoVALVE {
    #[inline]
    pub fn into_builder<'a>(self) -> DescriptorSetLayoutHostMappingInfoVALVEBuilder<'a> {
        DescriptorSetLayoutHostMappingInfoVALVEBuilder(self, std::marker::PhantomData)
    }
}
#[derive(Copy, Clone)]
///[Vulkan Manual Page](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkDescriptorSetLayoutHostMappingInfoVALVE.html) · Builder of [`DescriptorSetLayoutHostMappingInfoVALVE`]
#[repr(transparent)]
pub struct DescriptorSetLayoutHostMappingInfoVALVEBuilder<'a>(
    DescriptorSetLayoutHostMappingInfoVALVE,
    std::marker::PhantomData<&'a ()>,
);
impl<'a> DescriptorSetLayoutHostMappingInfoVALVEBuilder<'a> {
    #[inline]
    pub fn new() -> DescriptorSetLayoutHostMappingInfoVALVEBuilder<'a> {
        DescriptorSetLayoutHostMappingInfoVALVEBuilder(
            Default::default(),
            std::marker::PhantomData,
        )
    }
    #[inline]
    #[must_use]
    pub fn descriptor_offset(mut self, descriptor_offset: usize) -> Self {
        self.0.descriptor_offset = descriptor_offset as _;
        self
    }
    #[inline]
    #[must_use]
    pub fn descriptor_size(mut self, descriptor_size: u32) -> Self {
        self.0.descriptor_size = descriptor_size as _;
        self
    }
    #[inline]
    /// Discards all lifetime information.
    /// Use the `Deref` and `DerefMut` implementations if possible.
    pub fn build_dangling(self) -> DescriptorSetLayoutHostMappingInfoVALVE {
        self.0
    }
}
impl<'a> std::default::Default for DescriptorSetLayoutHostMappingInfoVALVEBuilder<'a> {
    fn default() -> DescriptorSetLayoutHostMappingInfoVALVEBuilder<'a> {
        Self::new()
    }
}
impl<'a> std::fmt::Debug for DescriptorSetLayoutHostMappingInfoVALVEBuilder<'a> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        std::fmt::Debug::fmt(&self.0, f)
    }
}
impl<'a> std::ops::Deref for DescriptorSetLayoutHostMappingInfoVALVEBuilder<'a> {
    type Target = DescriptorSetLayoutHostMappingInfoVALVE;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'a> std::ops::DerefMut for DescriptorSetLayoutHostMappingInfoVALVEBuilder<'a> {
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.0
    }
}
///Provided by [`crate::extensions::valve_descriptor_set_host_mapping`]
impl crate::DeviceLoader {
    #[inline]
    #[track_caller]
    ///[Vulkan Manual Page](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/vkGetDescriptorSetLayoutHostMappingInfoVALVE.html) · Function
    #[doc(alias = "vkGetDescriptorSetLayoutHostMappingInfoVALVE")]
    pub unsafe fn get_descriptor_set_layout_host_mapping_info_valve(
        &self,
        binding_reference: &crate::extensions::valve_descriptor_set_host_mapping::DescriptorSetBindingReferenceVALVE,
        host_mapping: Option<
            crate::extensions::valve_descriptor_set_host_mapping::DescriptorSetLayoutHostMappingInfoVALVE,
        >,
    ) -> crate::extensions::valve_descriptor_set_host_mapping::DescriptorSetLayoutHostMappingInfoVALVE {
        let _function = self
            .get_descriptor_set_layout_host_mapping_info_valve
            .expect(crate::NOT_LOADED_MESSAGE);
        let mut host_mapping = match host_mapping {
            Some(v) => v,
            None => Default::default(),
        };
        let _return = _function(self.handle, binding_reference as _, &mut host_mapping);
        host_mapping
    }
    #[inline]
    #[track_caller]
    ///[Vulkan Manual Page](https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/vkGetDescriptorSetHostMappingVALVE.html) · Function
    #[doc(alias = "vkGetDescriptorSetHostMappingVALVE")]
    pub unsafe fn get_descriptor_set_host_mapping_valve(
        &self,
        descriptor_set: crate::vk1_0::DescriptorSet,
    ) -> *mut std::ffi::c_void {
        let _function = self
            .get_descriptor_set_host_mapping_valve
            .expect(crate::NOT_LOADED_MESSAGE);
        let mut data = std::ptr::null_mut();
        let _return = _function(self.handle, descriptor_set as _, &mut data);
        data
    }
}
